*dothen.txt*	Slide by vim.

Author: Shoichiro Nakanishi <sheepwing@kyudai.jp>
License: MIT license

                                                                    *dothen*
==============================================================================
CONTENTS                                                        *dothen-contents*

Introduction		|dothen-introduction|
Commands		|dothen-functions|

==============================================================================
INTRODUCTION                                                *dothen-introduction*

Commands to control time easily.

==============================================================================
COMMANDS                                                     *dothen-commands*
                                                                  *Do*
Do ... Then ...

Run any command after other command.
The commands are separated by {g:dothen#sep}
of which default is 'Then'.

Example: >
  Do command1 Then command2
<
In case of this, it run command2 after command1.
It can chain.
	
Example: >
  Do command1 Then Do command2 Then command3
<
If you forgot writing Do after then, Do will be inserted 
automatically.

Example: >
  Do command1 Then command2 Then command3


Do([string])
                                                             *Do()*
Function version of Do.
The commands are separated by {g:dothen#sep}
of which default is 'Then'.
It is useful when you want to expand command from variables.

Example: >
  call Do("command1 Then command2")

Timer [number] ...
                                                        *Timer*

Run any command after waiting some mili-second.
The commands are separated by {g:dothen#sep}
of which default is 'Then'.

Example: >
  Timer 1000 command1

In case of this, it run command1 after waiting 1000 mili-second.
It can be used with Do command to run a other command later.

Example: >
  Do Timer 1000 command1 Then Do command2 

Furthermore, it can be chained multiple commands.
This example run 3 commands for 1 seconds.

Example: >
  Do Timer 1000 command1
	\Then Timer 1000 Do command2 
	\Then Timer 1000 command3 


Timer [number] ...
                                                        *Timer*

Function version of Timer.
The commands are separated by {g:dothen#sep}
of which default is 'Then'.
It is useful when you want to expand command from variables.

Example: >
  call Timer("1000 command1")


Sh ...
                                                        *Sh*

Run any shell command after waiting some mili-second.
The commands are separated by {g:dothen#sep}
of which default is 'Then'.

Example: >
  Sh shell-command1
	\Then vim-command1 
	\Then Timer 1000 command2 

This command can be used with Do and Timer.
This feature enables pseudo asynchronous processing.

Sh([string])
                                                        *Sh()*
Function version of Sh.
The commands are separated by {g:dothen#sep}
of which default is 'Then'.
It is useful when you want to expand command from variables.

Example: >
  call Sh("shell-command1
	\Then vim-command1 
	\Then Timer 1000 command2")

This command can be used with Do and Timer.
This feature enables pseudo asynchronous processing.


                                                        *g:DothenBuffer*
After you use Sh, dothen.vim stores the stdout in g:DothenBuffer.
This variable is list of strings.

PutLines({num}, {lines})                                       *PutLines()*

Put lines in current buffer. {num} is line number you want to
insert into. {lines} is list of strings.

FadeInLines({num}, {lines})                                       *PutLines()*
==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
